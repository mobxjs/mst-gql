// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic scaffolding to work 1`] = `
Array [
  Array [
    "UserModel.base",
    "/* This is a mst-sql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */

import { types } from \\"mobx-state-tree\\"
import { MSTGQLObject, MSTGQLRef, QueryBuilder } from \\"mst-gql\\"


import { RootStore } from \\"./index\\"

/**
 * UserBase
 * auto generated base class for the model UserModel.
 */
export const UserModelBase = MSTGQLObject
  .named('User')
  .props({
    __typename: types.optional(types.literal(\\"User\\"), \\"User\\"),
    id: types.identifier,
    name: types.maybe(types.string),
    avatar: types.maybe(types.string),
  })
  .views(self => ({
    get store() {
      return self.__getStore<typeof RootStore.Type>()
    }
  }))

export class UserModelSelector extends QueryBuilder {
  get id() { return this.__attr(\`id\`) }
  get name() { return this.__attr(\`name\`) }
  get avatar() { return this.__attr(\`avatar\`) }

}

export function selectFromUser() {
  return new UserModelSelector()
}

export const userModelPrimitives = selectFromUser().name.avatar.toString()

",
    true,
  ],
  Array [
    "UserModel",
    "import { UserModelBase } from \\"./UserModel.base\\"

/* The TypeScript type of an instance of UserModel */
export type UserModelType = typeof UserModel.Type

/* A graphql query fragment builders for UserModel */
export { selectFromUser, userModelPrimitives, UserModelSelector } from \\"./UserModel.base\\"

/**
 * UserModel
 */
export const UserModel = UserModelBase
  .actions(self => ({
    // This is an auto-generated example action.
    log() {
      console.log(JSON.stringify(self))
    }
  }))
",
    false,
  ],
  Array [
    "RootStore",
    "import { RootStoreBase } from \\"./RootStore.base\\"

export type RootStoreType = typeof RootStore.Type

export const RootStore = RootStoreBase
  .actions(self => ({
    // This is an auto-generated example action.
    log() {
      console.log(JSON.stringify(self))
    }
  }))
",
    false,
  ],
  Array [
    "RootStore.base",
    "/* This is a mst-sql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */
import { types } from \\"mobx-state-tree\\"
import { MSTGQLStore, configureStoreMixin, QueryOptions } from \\"mst-gql\\"

 import { UserModel } from \\"./UserModel\\"
 import { userModelPrimitives, UserModelSelector } from \\"./UserModel.base\\"

/**
* Store, managing, among others, all the objects received through graphQL
*/
export const RootStoreBase = MSTGQLStore
  .named(\\"RootStore\\")
  .extend(configureStoreMixin([['User', () => UserModel]], ['User']))
  .props({
    users: types.optional(types.map(types.late(() => UserModel)), {})
  })
  .actions(self => ({
    queryMe(variables?: {  }, resultSelector: string | ((qb: UserModelSelector) => UserModelSelector) = userModelPrimitives, options: QueryOptions = {}) {
      return self.query<typeof UserModel.Type>(\`query me { me {
        \${typeof resultSelector === \\"function\\" ? resultSelector(new UserModelSelector()).toString() : resultSelector}
      } }\`, variables, options)
    },    
  }))
",
    true,
  ],
  Array [
    "reactUtils",
    "/* This is a mst-sql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */

import { createStoreContext, createUseQueryHook } from \\"mst-gql\\"
import * as React from \\"react\\"
import { RootStore } from \\"./RootStore\\"

export const StoreContext = createStoreContext<typeof RootStore.Type>(React)

export const useQuery = createUseQueryHook(StoreContext, React)
",
    true,
  ],
  Array [
    "index",
    "/* This is a mst-sql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */

export * from \\"./UserModel\\"
export * from \\"./RootStore\\"
export * from \\"./reactUtils\\"
",
    true,
  ],
]
`;
